---
- name: add MySQL Community Server repository
  yum:
    name: https://dev.mysql.com/get/mysql{{ mysql_ga_version|replace('.', '') }}-community-release-el{{ ansible_distribution_major_version }}-{{ mysql_repository_package_version }}.noarch.rpm
- name: install MySQL packages
  yum:
    name: "{{ item }}"
  with_items: "{{ mysql_packages }}"
- name: install dependency packages
  yum:
    name: MySQL-python
- name: change MySQL Community Server repository status
  ini_file:
    dest: "/etc/yum.repos.d/mysql-community.repo"
    section: "mysql{{ item|replace('.', '') }}-community"
    option: enabled
    value: "{{ 1 if item == mysql_version else 0 }}"
  with_items:
    - 5.5
    - 5.6
    - 5.7
    - 8.0
- name: create MySQL setting files
  template:
    src: "{{ item }}.cnf.j2"
    dest: /etc/my.cnf.d/{{ item }}.cnf
  notify: restart mysql
  with_items:
    - client
    - mysql
    - mysqld
- name: MySQL is active and enabled on system startup
  systemd:
    name: mysqld
    state: started
    enabled: yes
- name: set connection param
  set_fact:
    mysql_connection_param: ""
- block:
  - name: get MySQL root temporary password
    shell: 'cat /var/log/mysqld.log | grep "temporary password" | sed "s/.\+root@localhost: //"'
    register: temporary_root_password
  - name: orverwrite connection param
    set_fact:
      mysql_connection_param: '-p"{{ temporary_root_password.stdout }}" --connect-expired-password'
  when: mysql_version|version_compare('5.7', '>=')
- name: check root user connection setting
  stat:
    path: /root/.my.cnf
  register: result
- block:
  - name: create mysql secure installation query file
    template:
      src: mysql_secure_installation.sql.j2
      dest: /tmp/mysql_secure_installation.sql
  - name: execute mysql secure installation
    shell: mysql -u root {{ mysql_connection_param }} mysql </tmp/mysql_secure_installation.sql
  - name: remove mysql secure installation query file
    file:
      path: /tmp/mysql_secure_installation.sql
      state: absent
  when: not result.stat.exists
- name: change root password
  command: mysqladmin password "{{ mysql_root_password }}" -u root
  when: result.stat.exists
- name: create root user connection setting
  ini_file:
    path: /root/.my.cnf
    section: client
    option: "{{ item.option }}"
    value: "{{ item.value }}"
    mode: "0600"
    create: yes
  with_items:
    - option: user
      value: root
    - option: password
      value: "{{ mysql_root_password }}"
- name: create/remove databases
  mysql_db:
    name: "{{ item.name }}"
    encoding: "{{ item.encoding|default(mysql_default_charset) }}"
    collation: "{{ item.collation|default(mysql_default_collation) }}"
    state: "{{ 'present' if item.state|default(true) else 'absent' }}"
  with_items: "{{ mysql_databases }}"
- name: create MySQL users
  mysql_user:
    name: "{{ item.0.user|default(item.0.name) }}"
    password: "{{ item.0.password|default(omit) }}"
    host: "{{ item.1 }}"
    priv: "{{ item.0.name }}.*:ALL"
  with_subelements:
    - "{{ mysql_databases }}"
    - hosts
    - flags:
        skip_missing: true
- name: import data
  mysql_db:
    name: "{{ item.name }}"
    target: "{{ item.import_data }}"
    state: import
  when: "item.import_data is defined and item.state|default(true)"
  with_items: "{{ mysql_databases }}"
- name: create/remove MySQL users
  mysql_user:
    name: "{{ item.0.name }}"
    password: "{{ item.0.password }}"
    host: "{{ item.1 }}"
    priv: "{{ item.0.priv }}"
    state: "{{ 'present' if item.0.state|default(true) else 'absent' }}"
  with_subelements:
    - "{{ mysql_users }}"
    - hosts
- name: allow MySQL port
  firewalld:
    service: mysql
    source: "{{ mysql_allow_host }}"
    permanent: yes
    state: enabled
  when: mysql_allow_host is defined
  notify: restart firewalld
